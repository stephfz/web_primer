<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Web Architecture - A Primer</title>
    <meta name="author" content="Sylvain Abélard" />
    <meta content="True" name="HandheldFriendly" />
    <meta name="viewport" content="width=device-width; initial-scale=1.0;" />
    <meta name="viewport" content="width=device-width" />
    <link href="light.css" rel="stylesheet">
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js"></script>
    <script type="text/javascript" src="webarch.js"></script>
  </head>
  <body>

<div id="navbar">

 <div id="railsgirls">
  <a href="http://guides.railsgirls.com">RailsGirls Guides</a>
 </div>

 <div><a>About</a>
  <div class="tooltip">
   This cheat sheet is intended as a short overview of how the Web works.
   It was made for RailsGirls, so it's oriented for MVC frameworks and Ruby.
  </div>
 </div>

 <div id="flags" class="tabs">
  <a id="en" href="./index.htm">EN</a>
  <a id="fr" href="./fr.htm">FR</a>
  <a id="es" href="./es.htm">ES</a>
 </div>

 <div>
   <a class="tab" href="https://github.com/abelards/web_primer">
     <span class="txt">Fork on </span>GitHub</a>
 </div>
 <a id="GitHubFork" href="https://github.com/abelards/web_primer"></a>

</div>

 <div class="content" id="title">
 <h1><a title="See in action with GitHub HTML preview"
	href="http://htmlpreview.github.com/?https://github.com/abelards/web_primer/blob/master/index.htm">
  Web Architecture
 </a></h1>

 <h3>El
   <span class="short">gran</span>
   <span class="txt">y maravilloso</span>
   viaje de un pequeño request.
 </h3>
</div>

<div id="sidebar">
<div class="content">
 <p class="help">
  <span class="lng">Hover your mouse over</span>
  <span class="tab">Click</span> en éstas palabras
  o esquema para obtener mayor información</span>
 </p>

<div class="keywords">
 <h2>Keywords</h2>
 <ul>
  <li id="client_side" class="cat"><h4>Client-side:</h4></li>
  <li id="user">Usuario</li>
  <li id="browser">Browser</li>

  <li id="internet" class="cat"><h4>Internet:</h4></li>
  <li id="request">Request</li>
  <li id="network">Network</li>
  <li id="response">Response</li>

  <li id="web_server" class="cat"><h4>Web server:</h4></li>
  <li id="server">Servidor</li>
  <li id="files">Archivos</li>
  <li id="routing">Routing</li>

  <li id="application" class="cat"><h4>Aplicación:</h4></li>
  <li id="app_server">App Server</li>
  <li id="controller">Controller</li>
  <li id="model">Model</li>
  <li id="model">Views</li>

  <li id="databases" class="cat"><h4>Bases de Datos:</h4></li>
  <li id="db">Base de datos</li>

 </ul>
</div>

<div class="vocabulary">
  <h2>Vocabulario</h2>

 <ul id="technical">
  <li id="html">HTML
    <div class="tooltip">
      HTML es un "lenguaje", lo usamos para describir interfaces y contenido.
      Es lo que tu código envia en respuesta, y luego es desplegado por el navegador 
      <br />
      <a class="wp" href="http://es.wikipedia.org/wiki/HTML">HTML</a>
    </div>
  </li>
  <li id="css">CSS
    <div class="tooltip">
      CSS es un "lenguaje" que describe como aplicar estilos a tu página HTML
      Se usa para separar la forma (colores, layout) del contenido (HTML)
    </div>
  </li>
  <li id="js">JS
    <div class="tooltip">
      JavaScript es un lenguaje que se ejecuta en la parte del cliente.
      Si queremos hacer algún comportamiento "inteligente" para los usuarios,
      sin usar el request común o ciclo de renderización de página, usamos JS.
    </div>
  </li>
  <li id="ajax">AJAX
    <div class="tooltip">
      Algunas veces, durante la incorporación de "comportamiento inteligente", se 
      desea obtención de datos del servidor sin tener que emplear request o renderización 
      página. En este caso, se podría utilizar data en un XML o en JSON, o una pequeña porción 
      de código (snippet) en HTML, esto se denomina un AJAX request.
    </div>
  </li>
  <li id="cookies">Cookies
    <div class="tooltip">
      El navegador guarda cierta información tuya.<br />
      Ésta es enviada al servidor en cada request, ayúdandolo a
      recordar tu idioma, algunos settings, o a identificarte.
    </div>
  </li>
  <li id="url_uri">URL
    <div class="tooltip">   
      Es lo que ves y escribes en la barra de Direcciones del navegador.<br />
      Por cierto, URL es el acrónimo de Universal Resource (Locator, Identifier).
      They are supposed to point to the exact same resource each time,
      but we developers have overlooked this far too often.
    </div>
  </li>
  <li id="dns">DNS
    <div class="tooltip">
      Las computadoras no se reconocen entre sí por nombres pero sí por IP..<br />
      Domain Name Service (DNS) o Servicio de Nombres de Dominio es similar a un directorio telefónico.
    </div>
  </li>
  <li id="framework">Framework
    <div class="tooltip">
      Un framework es, por lo general, una gran porción de código que simplifica las cosas.<br />
      Te permite usar pequeños bloques de código para hacer muchas operaciones, es más cercano a 
      nuestro lenguaje natural y por lo tanto es más fácil expresar(codificar) lo que queremos hacer.
      Trabajar con un framework nos sugiere trabajar bajo buenas prácticas.<br />
      Un framework se sostiene con una comunidad y herramientas relacionadas a él,
      como herramientas para pruebas, despliegue a producción, etc.
    </div>
  </li>
  <li id=""></li>
 </ul>

</div></div>
</div>

<div class="content" id="page">

  <div class="client_side group">Client
    <div class="item user">
      <div class="noup"></div>
      <div class="down">1. Entra a links o escribe URLs en el navegador</div>
      <div>User
	<div class="tooltip">Éste eres tú! ;)
	</div>
      </div>
    </div>

    <div class="item browser">
      <div class="up">18. El navegador "imprime" HTML sin problemas o te informa si algo falló.<br />       
           Javascript es ejecutado, de manera que puedas tener interacción con la web.
      </div>
      <div class="down">2. El navegador envía un request.</div>
      <div>Navegor
	<div class="tooltip">
	  El la aplicación para navegar por Internet.<br />
	  Ejemplos: Firefox, Chrome, Safari, Opera...	  
    También está el Internet Explorer, al que amamos odiar ;)
	</div>
      </div>
    </div>
  </div>

  <div class="internet group">Internet
    <div class="item request">
      <div class="noup"></div>
      <div class="down">3. El request es envíado a la red (ej. Internet).</div>
      <div>Request
	<div class="tooltip">
    Es información acerca de quién eres y que quieres.
    Quién eres: el contenido depende, pero usualmente es tu IP(quién va a recibir la respuesta),
        alguna información sobre tu PC(cuál navegador usar, tamaño de monitor, cookies).
    Qué quieres: la URL y algunos parámetros.
	</div>
      </div>
    </div>

    <div class="item network">
      <div class="up">17. Todo el camino de regreso!</div>
      <div class="down">4. Una red de hipervínculos(links) y equipos encontrarán adónde enviar tu request.</div>
      <div>Network
	<div class="tooltip">
	  The Internet is a series of tubes?
	  More like a mesh of servers, linked by connections like cable,
	  fiber, wifi or satellite links.
    La internet es un serie de tuberías?
    Es más parecida a un enjambre de servidores
	</div>
     </div>
    </div>

    <div class="item response">
      <div class="up">16. The response is sent back, the same way the request was sent.</div>
      <div class="nodown"></div>
      <div>Response
	<div class="tooltip">
	  You asked a question, the web server answers you.
	  This is the response you waited, with your carefully crafted content.
	</div>
      </div>
    </div>
  </div>

  <div class="web_server group">Web Server
    <div class="item server">
      <div class="up">15. The web server sends back what the app server gave it.</div>
      <div class="down">5. The web server gets the request, and finds out if it can send a file or call other pieces of software.</div>
      <div>Server
	<div class="tooltip">
	  This means both a machine (or several machines),
	  or a piece of software which purpose is to handle your request,
	  then calling any other piece of software the programmers decide,
	  then sending back a response.
	</div>
     </div>
    </div>

    <div class="item files">
      <div class="up">&nbsp; Files are sent back directly.</div>
      <div class="ret">The web server could find a file to send directly.</div>
      <div>Files
	<div class="tooltip">
	  If there is no clever stuff involved, and you asked for a file
	  like a picture (which is not supposed to change often), the server
	  can send it back very quickly, and avoid calling 'clever' code.
	</div>
     </div>
    </div>

    <div class="item routing">
      <div class="noup"></div>
      <div class="down">6. Some routing rules (either on the web server, app server or both) are used to send the request where it's appropriate.</div>
      <div>Routing
	<div class="tooltip">
	  There are plenty of things you can do,
	  so there are plenty of code bits too.
	  The routing is responsible for calling the right piece of code.
	</div>
     </div>
    </div>
  </div>


  <div class="application group">Application
    <div class="item app_server">
      <div class="up">14. Sends the HTML back. If you didn't render a view, you should return raw data, status codes, or redirections.</div>
      <div class="down">7. This is where the code is involved!</div>
      <div>App Server
	<div class="tooltip">
	  The app server runs the code. It needs to do smarter things than
	  the web server, so we often like to separate them, just in case
	  the full-fledged App Server is not required and the Web Server
	  is enough to do the job.
	</div>
     </div>
    </div>

    <div class="item view">
      <div class="up">13. the view is rendered with the data that came back.</div>
      <div class="nodown"></div>
      <div>Views
	<div class="tooltip">
	  Views are mostly HTML snippets, with placeholders the Controller will fill.
	</div>
      </div>
    </div>

    <div class="item controller">
      <div class="up">12. The controller can also apply application rules once it gets the data from the model.</div>
      <div class="down">8. The app server calls an action to handle the request.</div>
      <div>Controller
	<div class="tooltip">
	  If you use an MVC framework, the Controller handles the request.
	  The controller does some application logic.<hr />
	  Controller code can do some security checks, then ask for the
	  right pieces of data from the Model, run the View, and send you
	  back some kind of response: content, files, or maybe a redirection,
	  which is his way of saying "someone else should handle this".
	</div>
     </div>
    </div>

    <div class="item model">
      <div class="up">11. The model can still adapt and apply business rules once it gets the data.</div>
      <div class="down">9. The model answers to each question the controller asks him.</div>
      <div>Model
	<div class="tooltip">
	  If you use and MVC framework, the Controller asks the Model for data.
	  The model knows some business logic, and connects to the database.<hr />
	  How to know if code should go into the model or controller? If<ul>
	    <li>you make something that is not a web app, and the rules would be the same</li>
	    <li>you make several applications, and this logic is the same across all these</li>
	    <li>the controller is too long, you should probably put some code in the model to "help" it</li>
	  </ul>
	</div>
      </div>
    </div>

  </div>

  <div class="databases group">Databases
    <div class="item db">
      <div class="up">10. the database queries data or writes the updates.</div>
      <div class="ret"></div>
      <div>Database
	<div class="tooltip">
	  The database is where your data is stored safely.
	  These run very specialized software, optimised for fast search and/or high availability.<br />
	  Each one ensures some properties, like keeping the data even if there is a power outage.
	</div>
     </div>
    </div>
  </div>

 </div>

</body>
</html>
